<?php

namespace App\Controller;


use App\Entity\Article;
use App\Entity\Comments;
use App\Entity\User;
use App\Form\ArticleFormType;
use App\Form\ArticleType;
use App\Form\UserType;
use App\Repository\ArticleRepository;
use App\Repository\CommentsRepository;
use App\Repository\UserRepository;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;


class AdminController extends AbstractController
{



    /**
     * @Route("/blog_admin", name="admin")
     */
    public function index(ArticleRepository $repo)
    {
        $articles = $repo->findAll();
        return $this->render('admin/posts.html.twig', [
            'articles' => $articles
        ]);
    }

    /**
     * @Route("/blog_admin/users", name="users")
     */
    public function users(UserRepository $repo)
    {
        $users = $repo->findAll();
        return $this->render('admin/users.html.twig', [
            'users' => $users
        ]);
    }


    /**
     * @Route("/blog_admin/add_users", name="add_users")
     * @Route("/blog_admin/{id}/users", name="edit_users")
     */

    public function edit_users(User $user = null, Request $request, ObjectManager $manager, UserPasswordEncoderInterface $encoder){
       if(!$user){
           $user = new User();
       }
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()){
            $newPassword = $form->get('password')->getData();
            if($newPassword != null){
                $password = $encoder->encodePassword($user,$newPassword);
                $user->setPassword($password);
            }
            $role = $form->get('roles')->getData();
            $user->setRoles($role);
            $manager->persist($user);
            $manager->flush();
           return $this->redirectToRoute('users');
        }

        return $this->render('admin/add_user.html.twig',[
            'formUser'=> $form->createView(),
            'editMode'=> $user->getId() !== null]);
    }

    /**
     * @Route("/blog_admin/{id}/user_delete", name="del_user")
     */

    public function delete_user(User $user, ObjectManager $manager){
        if($user->getId()){
            $manager->remove($user);
            $manager->flush();
            return $this->redirectToRoute('users');
        }
    }

    /**
     * @Route("/blog_admin/create", name="admin_create")
     * @Route("/blog_admin/{id}/edit", name="admin_edit")
     */
    public function create(Article $article = null, Request $request, ObjectManager $manager)
    {


        if(!$article){
            $article = new Article();
        }
        $form = $this->createForm(ArticleFormType::class,$article);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()){

            if(!$article->getId()){

                    $article->setCreatedAt(new \DateTime());
            }



            $file = $form->get('image')->getData();

            $file_ico = $form->get('imageIco')->getData();
            if($file != null || $file_ico != null){

                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
                $fileName_ico = $this->generateUniqueFileName().'.'.$file_ico->guessExtension();
                $article->setImage($fileName);
                $article->setImageIco($fileName_ico);
                try {
                    $file->move(
                        $this->getParameter('images_directory'),
                        $fileName
                    );
                    $file_ico->move(
                        $this->getParameter('images_directory'),
                        $fileName_ico
                    );

                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }


            }


            $manager->persist($article);
            $manager->flush();
            return $this->redirectToRoute('blog_show',['id' => $article->getId()]);

        }
        return $this->render('admin/add_post.html.twig',[
            'formArticle' => $form->createView(),
            'editMode'        => $article->getId() !== null
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/blog_admin/{id}/post/delete", name="admin_delete")
     */

    public function delete(Article $article, ObjectManager $manager){
        if($article->getId()){


            $comments = new Comments();
            $article->setCategory(NULL);
            $manager->flush();
            $article->removeComment($comments);
            $manager->remove($article);
            $manager->flush();
            return $this->redirectToRoute('admin');

        }
    }
}

